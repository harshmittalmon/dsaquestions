class Solution {
public:
    int tree_ht(TreeNode * root){
        if(root == NULL)return 0;
        int lh= tree_ht(root->left);
        int rh= tree_ht(root->right);
        return (1+max(lh,rh));
    }
    bool isBalanced(TreeNode* root) {
        if(root == NULL) return true;
        int lh = tree_ht(root->left);
        int rh = tree_ht(root->right);
        if(abs(rh-lh)>1 )return false;
        bool lt = isBalanced(root->left);
        bool rt = isBalanced(root->right);
        if(!rt || !lt)return false;
        return true;
    }
};

method 2 o(n)
public:
    int tree_ht(TreeNode * root){
        if(root == NULL)return 0;
        int lh= tree_ht(root->left);
        int rh= tree_ht(root->right);
        if(lh==-1 || rh==-1)return -1;
        if(abs(lh-rh)>1)return -1;
        return (1+max(lh,rh));
    }
    bool isBalanced(TreeNode* root) {
        if(root == NULL) return true;
        if(tree_ht(root)==-1)return false;
        return true;
    }
};
