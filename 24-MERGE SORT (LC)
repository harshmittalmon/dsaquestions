class Solution {
public:
    
    
    
    void merge(vector<int> & nums, int l,int r,int mid){
        int size = r-l+1,k=0,i=l,j=mid+1;
        vector<int> temp(size);
        while(i< mid+1 and  j <= r ){
            if(nums[i]> nums[j]){
                
                // cout <<"l : "<<l<<" r : "<<r<< "  k: "<<k<< "  j: "<<j<<endl;
                temp[k++] = nums[j++];
            }
            
            else{
              // cout<<"l : "<<l<<" r : "<<r << "  k: "<<k<< "  i: "<<i<<endl;
                temp[k++]=nums[i++];
                
            }
        }
        for(int x = i;x<=mid;x++){
            temp[k++]=nums[x];
        }
        for(int x = j;x<=r;x++){
            temp[k++]=nums[x];
            // cout << "k  "<< k<<" j "<<j<<endl;
        }
        for(int i=l;i<=r;i++){
            nums[i]=temp[i-l];
            // for(auto& i: temp){
              // cout << i<<" ";
            // }
            // cout <<endl;
            // for(auto & i : nums){
      // cout << i<<" ";
    // }cout<<endl;
        }
        
    }
   void sort(vector<int> & nums, int l ,int r){
        // cout << l<< " "<<r<<endl;
        if(l==r)return ;
        int mid = (l+r)>>1;
        sort(nums,l,mid);
        sort(nums,mid+1,r);
        merge(nums,l,r,mid);
    }
    vector<int> sortArray(vector<int>& nums) {
        int left = 0 , right = nums.size()-1,mid = (left+right)>>1;
        sort(nums,left,right);
        return nums;
    }
};
